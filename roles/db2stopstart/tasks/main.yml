---
    - debug: msg="Play_hosts={{play_hosts}}"
      run_once: true

    - name: Verify that required variables are defined
      assert:
        that: 
          - "{{ item }} is defined"
          - "{{ item }} | length > 0"
          - "{{ item }} != None"
        fail_msg: "{{ item }} needs to be set for the role to work. Ex: ansible-playbook start_stop_db2.yml -e 'dbaction=stop'"
        success_msg: "Required variable {{ item }} is defined"
      loop: ['dbaction']
      run_once: true

    - name: Create - Directory Structure
      file: path="{{ item }}" state=directory mode=0777
      loop: "{{ dirstocreate }}"
      tags: createdirs

    - name: Copy - Comman functions and variables file
      template: src=templates/include_db2.sh dest=/tmp/include_db2 mode=0777
      tags: copyscripts

    #- name: Copy - Scrips to target node
    #  copy: src="{{ item }}" dest="{{ scriptsdir }}/{{ item }}" mode=0755
    #  loop: "{{ scriptstocopy }}"
    #  tags: copyscripts

    - name: Get db2 instances
      shell: |
             $(/usr/local/bin/db2ls | tail  -1 | awk '{print $1"/instance/db2ilist"}') > /tmp/db2ilist.lst
             chmod 777 /tmp/db2ilist.lst;
             if [[ -f /tmp/db2-role.txt ]]; then rm -f /tmp/db2-role.txt; fi
             if [[ -f /tmp/db2-standby.txt ]]; then rm -f /tmp/db2-standby.txt; fi
             if [[ -f /tmp/validate_db2.sh.log ]]; then rm -f /tmp/validate_db2.sh.log; fi
             if [[ -f /tmp/db2_val_ha.sh.log ]]; then rm -f /tmp/db2_val_ha.sh.log; fi
             . /tmp/include_db2
             log_roll ${MAINLOG}
             cat /tmp/db2ilist.lst
      register: db2ilist
      tags: always

    - name: Info - Available DB2 Instances
      debug: msg="{{ db2ilist.stdout_lines }}"
      tags: listinst,info
    
    - name: Run - Check Current db2 database Roles
      script: "check_db_roles.sh {{ item }}"
      become: true
      become_user: "{{ item }}"
      loop: "{{ db2ilist.stdout_lines }}"
      when: dbaction != "status"
      tags: checkroles

    - name: Get - HADR Roles
      shell: |
              if [[ $(cat /tmp/db2-role.txt | grep -i primary | wc -l) -gt 0 ]]; then
                echo "$(cat /tmp/db2-role.txt | grep -i primary | head -1)" > /tmp/db_role.txt
              else
                echo "NOTPRIMARY NA" > /tmp/db_role.txt
                #echo "PRIMARY {{ inventory_hostname }}" > /tmp/db_role.txt
              fi
              cat /tmp/db_role.txt
      register: hadrout
      tags: validateha
      when: dbaction != "status"

    #- debug: msg="{{ hadrout.stdout }}"
    
    - set_fact:
       hadrop: "{{ hadrout.stdout.split(' ') }}"
      tags: validateha
      when: dbaction != "status"

    - set_fact:
        DBROLE: "{{ hadrop.0 }}"
        DBSTDBYHOST: "{{ hadrop.1 }}"
      tags: validateha
      when: dbaction != "status"

    - name: Info - Server Status
      debug: msg="Current Server {{ inventory_hostname }} DB Role - {{ DBROLE }} and Standby Host - {{ DBSTDBYHOST }}"
      tags: info
      when: dbaction != "status"

    - import_tasks: start_db2.yml
      when: dbaction == "start"
      tags: startdb

    - name: Block for stop DB2 Database and Instances.
      block:
        - import_tasks: failover_db2.yml
          delegate_to: "{{ DBSTDBYHOST }}"
          when: DBROLE == "PRIMARY"
          tags: failover

        - name: Stop - DB2 Databases and Instance
          import_tasks: stop_db2.yml

      when: dbaction == "stop"
      tags: stopdb

    - import_tasks: validate_db2.yml
      #when: dbaction == "start" or dbaction == "validate" or dbaction == "status" or dbaction == "stop" 
      tags: validate

    - name: Remove - Scripts from Target directory
      file: path="/tmp/{{ item }}" state=absent
      loop: "{{ scriptstocopy }}"
      tags: cleanup      
      
    - file: path="{{ item }}" state=absent
      loop: ['/tmp/include_db2']
      tags: cleanup