---

    - debug: msg="Play_hosts={{play_hosts}}"
      run_once: true
      tags: always

    - include_vars: db2v111.yml
      when: tgtversion == "v11.1"
      tags: always

    - include_vars: db2v115.yml
      when: tgtversion == "v11.5"
      tags: always

    - include_vars: db2v105.yml
      when: tgtversion == "v11.0"
      tags: always

    - name: Run - prereq steps
      import_tasks: "pre_reqs.yaml"
      tags: prereq

    - name: Get db2 instances
      shell: |
              DB2INST="{{ tgtdb2inst }}"
              if [[ "${DB2INST}" == "all" ]]; then
                /usr/local/bin/db2ls |  tail -n +4 | awk '{print $1}' |while read inst; do $inst/instance/db2ilist; done > /tmp/db2ilist.lst
              else
                echo "${DB2INST}" > /tmp/db2ilist.lst;
              fi
              chmod 777 /tmp/db2ilist.lst;
              if [[ -f /tmp/db2-role.txt ]]; then sudo rm -f /tmp/db2-role.txt; fi
              if [[ -f /tmp/db2-standby.txt ]]; then sudo rm -f /tmp/db2-standby.txt; fi
              if [[ -f /tmp/validate_db2.sh.log ]]; then sudo rm -f /tmp/validate_db2.sh.log; fi
              if [[ -f /tmp/db2_val_ha.sh.log ]]; then sudo rm -f /tmp/db2_val_ha.sh.log; fi
              if [[ -f /tmp/HADR_roles.txt ]]; then sudo rm -f /tmp/HADR_roles.txt; fi
              if [[ -f /tmp/cur_db_role.txt ]]; then sudo rm -f /tmp/cur_db_role.txt; fi
              LOGDIR="{{ logsdir }}"
              echo "find $LOGDIR/* -name \"*.log*\" -type f -mtime +30 -exec rm -f {} \\;" | sh
              . /tmp/include_db2
              log_roll ${MAINLOG}
              cat /tmp/db2ilist.lst | grep -v db2cln
      register: db2ilist
      tags: always

    - name: "Info - DB2 Fixpack \"{{ tgtversion }}\" will be performed on \"{{ tgtdb2inst }}\" Db2 Instance(s)"
      debug: msg="{{ db2ilist.stdout_lines }}"
      tags: listinst,info

    - name: Run - Check Current db2 database Roles
      command: "{{ scriptsdir }}/check_db_roles.sh {{ item }}"
      become: true
      become_user: "{{ item }}"
      loop: "{{ db2ilist.stdout_lines }}"
      tags: checkdbrole

    - name: Get - HADR Roles
      shell: |
              if [[ $(cat /tmp/db2-role.txt | grep -i primary | wc -l) -gt 0 ]]; then
                PSTANDBY=$(cat /tmp/db2-role.txt | awk '{print $2}')
                ROLE=$(cat /tmp/db2-role.txt | awk '{print $1}')
                STANDBYHOST=$(nslookup ${PSTANDBY} | grep -i name | cut -d ":" -f2 | awk '{print $1}')
                echo "${ROLE} ${STANDBYHOST}" > /tmp/cur_db_role.txt

              elif [[ "$(grep -c ' ' /tmp/db2-role.txt)" == "$(grep -c 'STANDBY' /tmp/db2-role.txt)" ]]; then
                echo "STANDBY NA" > /tmp/cur_db_role.txt

              elif [[ "$(grep -c ' ' /tmp/db2-role.txt)" == "$(grep -c 'STANDARD' /tmp/db2-role.txt)" ]]; then
                echo "STANDARD NA" > /tmp/cur_db_role.txt
              fi
      tags: getdbrole

    - command: cat /tmp/cur_db_role.txt
      register: hadrout
      tags: getdbrole,install,update

    - set_fact:
       hadrop: "{{ hadrout.stdout.split(' ') }}"
      tags: getdbrole,install,update

    - set_fact:
        DBROLE: "{{ hadrop.0 }}"
        DBSTDBYHOST: "{{ hadrop.1 }}"
      tags: validateha,install,update

    - name: Info - Server Status
      debug: msg="This Server - {{ inventory_hostname }} DB Role - {{ DBROLE }} and Standby Host - {{ DBSTDBYHOST }}"
      tags: info,,install,update

    - name: Block for DB2 StandAlone Servers FP Upgrade.
      block:
        - import_tasks: prepatch.yml
          tags: prepatch

        - import_tasks: stopdb2.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: stopdb2

        - import_tasks: installfp.yml
          when: installupdate == "install" or installupdate == "install_update"
          tags: install

        - import_tasks: updateinc.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: update

        - import_tasks: startdb2.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: startdb2

        - import_tasks: postpatch.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: postpatch

      when: DBROLE == "STANDARD"
      tags: standalonefp

    - name: Block for DB2 Standby Servers FP Upgrade.
      block:
        - import_tasks: prepatch.yml
          tags: prepatch

        - import_tasks: stopdb2.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: stopdb2

        - import_tasks: installfp.yml
          when: installupdate == "install" or installupdate == "install_update"
          tags: install

        - import_tasks: updateinc.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: update

        - import_tasks: startdb2.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: startdb2

        - import_tasks: postpatch.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: postpatch

        - import_tasks: failover.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: failover

      when: DBROLE == "STANDBY"
      tags: standbyfp

    - name: Block for DB2 Standby Servers FP Upgrade.
      block:
        - import_tasks: prepatch.yml
          tags: prepatch

        - import_tasks: stopdb2.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: stopdb2

        - import_tasks: installfp.yml
          when: installupdate == "install" or installupdate == "install_update"
          tags: install

        - import_tasks: updateinc.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: update

        - import_tasks: startdb2.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: startdb2

        - import_tasks: postpatch.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: postpatch

        - import_tasks: failover.yml
          when: installupdate == "update" or installupdate == "install_update"
          tags: failback
      when: DBROLE == "PRIMARY"
      tags: primaryfp

    - import_tasks: validate_db2.yml
      tags: validate

    - name: Remove - Scripts from Target directory
      file: path="{{ scriptsdir }}/{{ item }}" state=absent
      loop: "{{ scriptstocopy }}"
      when: dbaction != "status"
      tags: cleanup      
      
    - file: path="{{ item }}" state=absent
      loop: ['/tmp/include_db2']
      when: dbaction != "status"
      tags: cleanup


    - name: Run - hadr_roles and todolist scripts
      shell: "sh {{ scriptsdir }}/{{ item }}"
      loop:
        - hadr_roles.sh
        - todolist.sh
      when: not runfile.stat.exists and
            not complete.stat.exists
      tags: hadr_roles,runtodo

    - name: Create - Steps to run on Standbys or Stand-Alone or client db2 servers
      shell:
        cmd: ls STAGE01.DB2STEP*.*.TODO | sed -e "s/\.TODO//g"
        chdir: "{{ stepsdir }}"
      register: todos1
      failed_when: todos1.rc > 1
      when: not complete.stat.exists
      tags: todos,main

    - name: Create - Steps to run on Primary db2 server
      shell:
        cmd: ls STAGE02.DB2STEP*.*.TODO | sed -e "s/\.TODO//g"
        chdir: "{{ stepsdir }}"
      register: todos2
      failed_when: todos1.rc > 1
      when: not complete.stat.exists
      tags: todos,main

    - name: Info - Steps to run on Standbys or Stand-alone or client db2 Server
      debug:
        msg: "{{ todos1.stdout }}"
      when: not complete.stat.exists
      ignore_errors: true
      tags: todos,main

    - name: Info - Steps to run on Primary Server
      debug:
        msg: "{{ todos2.stdout }}"
      when: not complete.stat.exists
      ignore_errors: true
      tags: todos,main

    - name: Run - Steps on Standbys or client or Stand-Alone
      shell:
        cmd: "if ( sh {{ item }}.TODO ); then mv {{ item }}.TODO {{ item }}.DONE; else echo \"Failed: {{ item }}.TODO\"; fi"
        chdir: "{{ stepsdir }}"
      loop: "{{ todos1.stdout_lines }}"
      when: not complete.stat.exists
      tags: main

    - name: Run - Steps on Primary
      shell:
        cmd: "if ( sh {{ item }}.TODO ); then mv {{ item }}.TODO {{ item }}.DONE; else echo \"Failed: {{ item }}.TODO\"; fi"
        chdir: "{{ stepsdir }}"
      loop: "{{ todos2.stdout_lines }}"
      when: not complete.stat.exists
      tags: main

    - name: Remove - Running file (db2patch.running)
      file: path="{{ pvtgtdir }}/db2patch.running" state=absent
      tags: main

    - name: Create - Complete file (db2patch.complete)
      file: path="{{ pvtgtdir }}/db2patch.complete" state=touch mode=0777
      tags: main